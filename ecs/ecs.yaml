# File: ecs.yaml 
# This module create all the ECS related items
#
# Before executing this, make sure "init.sh" is called which would create all "Parameter Store" values 
# And also creates an ECR repository 
# And uploades existing docker image "springdemo" onto ECR 
# And make sure both the Network and Permissions modules are created 
#
# Resource that would be created
# 1) ECS Cluster 
# 2) ECS Task Definition  
# 3) ECS Service 
# 4) ECS Role 
# 

Description: "ECS Cluster and springdemo application"

Parameters: 
  networkStackName:
    Description: Network stack
    Type: String
    Default: nw

  permStackName:
    Description: Permissions stack
    Type: String
    Default: perm
    
  albStackName:
    Description: ALB stack 
    Type: String
    Default: alb
    
  environment: 
    Type: String 
    Default: dev 
    AllowedValues: 
      - dev

Conditions: 
  createOnlyProdResources: 
    !Equals [ !Ref environment, "dev" ] 

Resources:
    
  # Create an ECS Cluster  
  # Inputs: 
  #  From Parameter store
  #  1) Cluster Name  
  #  
  #  Other things to consider: 
  #   1) Make sure to select FARGATE 
  #   2) Enable Container Insights 
  #   
  myEcsCluster:                                                                
    Description: "New ECS Cluster"                        
    Type: AWS::ECS::Cluster
    Properties:                                                                  
     ClusterName: !Sub '{{resolve:ssm:/${environment}/ecs/cluster_name}}'                 
     CapacityProviders: 
       - FARGATE
     ClusterSettings: 
       - Name: containerInsights
         Value: enabled 
     Tags:
       - Key: Name
         Value: !Join ["-", [Fn::Sub: "${AWS::StackName}", "ECSCluster"] ]
       - Key: Environment
         Value: !Sub ${environment}

  # Create an ECS Task Definition, basically memory configution, cpu config etc   
  # Inputs: 
  #  From Parameter store
  #  1) Task Name 
  #  2) Docker Image location (repository path)  
  #  3) ECS Role, which is a reference 
  # 
  #  Other things to consider: 
  #   1) Make sure to select FARGATE 
  #   2) Enable Container Insights 
  #   3) Container Port
  # 
  myEcsTaskDefinition: 
    Description: "ECS task definition" 
    Type: AWS::ECS::TaskDefinition
    Properties:                                                                  
     Family: !Sub '{{resolve:ssm:/${environment}/ecs/task_name}}'
     RequiresCompatibilities: 
       - FARGATE
     ExecutionRoleArn: !Sub ${myECSRole}
     Memory: 3 GB
     Cpu: 1 vCPU 
     NetworkMode: awsvpc
     ContainerDefinitions: 
       - Name: SpringDemo
         Image: !Sub '{{resolve:ssm:/${environment}/ecs/ecr_repository}}'
         PortMappings: 
           - ContainerPort: 80
             Protocol: tcp 

     Tags:
       - Key: Name
         Value: !Join ["-", [Fn::Sub: "${AWS::StackName} ", "Task"] ]
       - Key: Environment
         Value: !Sub ${environment}

  # Create an ECS Service   
  # Inputs: 
  #  From Parameter store
  #  1) Cluster reference  
  #  2) Task Definition reference   
  #  3) ECS Role, which is a reference 
  #  4) Service Name 
  # 
  #  Other things to consider: 
  #   1) Make sure to select FARGATE 
  #   2) Assign Public IP is enabled  
  #   3) Container Port
  # 
  #   4) Security Group information from the "permissions" stack
  #   4) Public Subnet 1 information from the "network" stack 
  myEcsService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: ecsService 
      Cluster: !Ref myEcsCluster
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: 
               Fn::Sub: "${permStackName}-PUBLIC-SG"
          Subnets:
            - Fn::ImportValue: 
               Fn::Sub: "${networkStackName}-PUBLIC-SUBNET1"
      LoadBalancerConfig: 
        TargetGroupArn: 
            - Fn::ImportValue: 
                Fn::Sub: "${albStackName}-TARGET-GROUP"
      TaskDefinition: !Ref myEcsTaskDefinition
      Tags:
       - Key: Name
         Value: !Join ["-", [Fn::Sub: "${AWS::StackName} ", "Service"] ]
       - Key: Environment
         Value: !Sub ${environment}

  # 
  # Create an ECS Role    
  # 
  myECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: myecsrole1
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole

      Policies:
        - PolicyName: "ECSFullAccessForMe"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                -
                  Effect: "Allow"
                  Action:
                      - ecr:GetAuthorizationToken
                      - ecr:BatchCheckLayerAvailability
                      - ecr:GetDownloadUrlForLayer
                      - ecr:BatchGetImage
                      - logs:BatchGetImage
                      - logs:PutLogEvents
                  Resource: "*"

 # Outputs 
 # 1) ECS Cluster 
 # 2) Task Definition 
 # 3) Image Repository Path 
 # 4) URL to access the application 
 # 
Outputs: 
  ECSClusterID: 
    Description: ECS Cluster 
    Value: !Ref myEcsCluster 

  ECSTaskDefinition: 
    Description: ECS Task 
    Value: !Ref myEcsTaskDefinition 

  MyRepositoryPath: 
    Description: ECR Repo 
    Value: !Sub '{{resolve:ssm:/${environment}/ecs/ecr_repository}}'                 

  MyRepositoryArn: 
    Description: ECR Repo 
    Value: !Sub '{{resolve:ssm:/${environment}/ecs/ecr_repository_arn}}'                 
